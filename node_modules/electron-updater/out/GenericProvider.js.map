{"version":3,"file":"GenericProvider.js","sourceRoot":"","sources":["../src/GenericProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpError, HttpExecutor } from \"electron-builder-http\"\nimport { GenericServerOptions } from \"electron-builder-http/out/publishOptions\"\nimport { UpdateInfo } from \"electron-builder-http/out/updateInfo\"\nimport { RequestOptions } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport * as url from \"url\"\nimport { FileInfo, getChannelFilename, getCustomChannelName, getDefaultChannelName, isUseOldMacProvider, Provider } from \"./main\"\n\nexport class GenericProvider extends Provider<UpdateInfo> {\n  private readonly baseUrl = url.parse(this.configuration.url)\n  private readonly channel = this.configuration.channel ? getCustomChannelName(this.configuration.channel) : getDefaultChannelName()\n\n  constructor(private readonly configuration: GenericServerOptions, private readonly executor: HttpExecutor<any>) {\n    super()\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    let result: UpdateInfo\n    const channelFile = getChannelFilename(this.channel)\n    const pathname = path.posix.resolve(this.baseUrl.pathname || \"/\", channelFile)\n    try {\n      const options: RequestOptions = {\n        hostname: this.baseUrl.hostname,\n        path: `${pathname}${this.baseUrl.search || \"\"}`,\n        protocol: this.baseUrl.protocol,\n        headers: this.requestHeaders || undefined\n      }\n      if (this.baseUrl.port != null) {\n        options.port = parseInt(this.baseUrl.port, 10)\n      }\n      result = safeLoad(await this.executor.request<string>(options))\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`Cannot find channel \"${channelFile}\" update info: ${e.stack || e.message}`)\n      }\n      throw e\n    }\n\n    Provider.validateUpdateInfo(result)\n    if (isUseOldMacProvider()) {\n      (result as any).releaseJsonUrl = url.format({...this.baseUrl, pathname} as any)\n    }\n    return result\n  }\n\n  async getUpdateFile(versionInfo: UpdateInfo): Promise<FileInfo> {\n    if (isUseOldMacProvider()) {\n      return versionInfo as any\n    }\n\n    return {\n      name: path.posix.basename(versionInfo.path),\n      url: url.format({...this.baseUrl, pathname: path.posix.resolve(this.baseUrl.pathname || \"/\", versionInfo.path)} as any),\n      sha2: versionInfo.sha2,\n      sha512: versionInfo.sha512,\n    }\n  }\n}"]}
