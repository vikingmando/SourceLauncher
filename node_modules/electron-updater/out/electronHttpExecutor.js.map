{"version":3,"file":"electronHttpExecutor.js","sourceRoot":"","sources":["../src/electronHttpExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import _debug from \"debug\"\nimport { net, session } from \"electron\"\nimport { CancellationToken, configureRequestOptions, DownloadOptions, dumpRequestOptions, HttpExecutor } from \"electron-builder-http\"\nimport { ensureDir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { parse as parseUrl } from \"url\"\n\nexport const NET_SESSION_NAME = \"electron-updater\"\n\nconst debug = _debug(\"electron-builder\")\n\nexport type LoginCallback = (username: string, password: string) => void\n\nexport class ElectronHttpExecutor extends HttpExecutor<Electron.ClientRequest> {\n  constructor(private proxyLoginCallback?: (authInfo: any, callback: LoginCallback) => void) {\n    super()\n  }\n\n  async download(url: string, destination: string, options: DownloadOptions): Promise<string> {\n    if (options == null || !options.skipDirCreation) {\n      await ensureDir(path.dirname(destination))\n    }\n\n    return await options.cancellationToken.createPromise<string>((resolve, reject, onCancel) => {\n      const parsedUrl = parseUrl(url)\n\n      this.doDownload(configureRequestOptions({\n        protocol: parsedUrl.protocol,\n        hostname: parsedUrl.hostname,\n        path: parsedUrl.path,\n        port: parsedUrl.port ? parseInt(parsedUrl.port, 10) : undefined,\n        headers: options.headers || undefined,\n      }), destination, 0, options, (error: Error) => {\n        if (error == null) {\n          resolve(destination)\n        }\n        else {\n          reject(error)\n        }\n      }, onCancel)\n    })\n  }\n\n  doApiRequest<T>(options: any, cancellationToken: CancellationToken, requestProcessor: (request: Electron.ClientRequest, reject: (error: Error) => void) => void, redirectCount: number = 0): Promise<T> {\n    if (debug.enabled) {\n      debug(`request: ${dumpRequestOptions(options)}`)\n    }\n\n    return cancellationToken.createPromise<T>((resolve, reject, onCancel) => {\n      const request = (net as any).request({session: (session as any).fromPartition(NET_SESSION_NAME), ...options}, (response: any) => {\n        try {\n          this.handleResponse(response, options, cancellationToken, resolve, reject, redirectCount, requestProcessor)\n        }\n        catch (e) {\n          reject(e)\n        }\n      })\n      this.addProxyLoginHandler(request)\n      this.addTimeOutHandler(request, reject)\n      request.on(\"error\", reject)\n      requestProcessor(request, reject)\n      onCancel(() => request.abort())\n    })\n  }\n\n  public doRequest(options: any, callback: (response: any) => void): any {\n    const request = (net as any).request({session: (session as any).fromPartition(NET_SESSION_NAME), ...options}, callback)\n    this.addProxyLoginHandler(request)\n    return request\n  }\n\n  private addProxyLoginHandler(request: Electron.ClientRequest) {\n    if (this.proxyLoginCallback != null) {\n      request.on(\"login\", this.proxyLoginCallback)\n    }\n  }\n}"]}
