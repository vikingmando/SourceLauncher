{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, ProgressInfo, RequestHeaders } from \"electron-builder-http\"\nimport { UpdateInfo, VersionInfo } from \"electron-builder-http/out/updateInfo\"\nimport { EventEmitter } from \"events\"\nimport { format as buggyFormat, Url } from \"url\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { LoginCallback } from \"./electronHttpExecutor\"\n\nexport { NET_SESSION_NAME } from \"./electronHttpExecutor\"\nexport { AppUpdater } from \"./AppUpdater\"\n\n// autoUpdater to mimic electron bundled autoUpdater\nlet _autoUpdater: any\n\n// required for jsdoc\nexport declare const autoUpdater: AppUpdater\n\nfunction _load_autoUpdater(): AppUpdater {\n  // tslint:disable:prefer-conditional-expression\n  if (process.platform === \"win32\") {\n    _autoUpdater = new (require(\"./NsisUpdater\").NsisUpdater)()\n  }\n  else if (process.platform === \"darwin\") {\n    _autoUpdater = new (require(\"./MacUpdater\").MacUpdater)()\n  }\n  else {\n    _autoUpdater = require(\"electron\").autoUpdater\n  }\n  return _autoUpdater\n}\n\nObject.defineProperty(exports, \"autoUpdater\", {\n  enumerable: true,\n  get: () => {\n    return _autoUpdater || _load_autoUpdater()\n  }\n})\n\nexport interface FileInfo {\n  readonly name: string\n  readonly url: string\n  readonly sha2?: string\n  readonly sha512?: string\n  readonly headers?: RequestHeaders\n}\n\nexport abstract class Provider<T extends VersionInfo> {\n  protected requestHeaders: RequestHeaders | null\n\n  setRequestHeaders(value: RequestHeaders | null): void {\n    this.requestHeaders = value\n  }\n\n  abstract getLatestVersion(): Promise<T>\n\n  abstract getUpdateFile(versionInfo: T): Promise<FileInfo>\n\n  static validateUpdateInfo(info: UpdateInfo) {\n    if (isUseOldMacProvider()) {\n      if ((info as any).url == null) {\n        throw new Error(\"Update info doesn't contain url\")\n      }\n      return\n    }\n\n    if (info.sha2 == null && info.sha512 == null) {\n      throw new Error(`Update info doesn't contain sha2 or sha512 checksum: ${JSON.stringify(info, null, 2)}`)\n    }\n    if (info.path == null) {\n      throw new Error(`Update info doesn't contain file path: ${JSON.stringify(info, null, 2)}`)\n    }\n  }\n}\n\n// due to historical reasons for windows we use channel name without platform specifier\nexport function getDefaultChannelName() {\n  return `latest${getChannelFilePrefix()}`\n}\n\nfunction getChannelFilePrefix() {\n  return getCurrentPlatform() === \"darwin\" ? \"-mac\" : \"\"\n}\n\nexport function getCustomChannelName(channel: string) {\n  return `${channel}${getChannelFilePrefix()}`\n}\n\nexport function getCurrentPlatform() {\n  return process.env.TEST_UPDATER_PLATFORM || process.platform\n}\n\nexport function isUseOldMacProvider() {\n  // getCurrentPlatform() === \"darwin\"\n  return false\n}\n\nexport function getChannelFilename(channel: string) {\n  return `${channel}.yml`\n}\n\nexport interface UpdateCheckResult {\n  readonly versionInfo: VersionInfo\n  readonly fileInfo?: FileInfo\n\n  readonly downloadPromise?: Promise<any> | null\n\n  readonly cancellationToken?: CancellationToken\n}\n\nexport const DOWNLOAD_PROGRESS = \"download-progress\"\nexport const UPDATE_DOWNLOADED = \"update-downloaded\"\n\nexport type LoginHandler = (authInfo: any, callback: LoginCallback) => void\n\nexport class UpdaterSignal {\n  constructor(private emitter: EventEmitter) {\n  }\n\n  /**\n   * Emitted when an authenticating proxy is asking for user credentials.\n   * @see [Electron docs](https://github.com/electron/electron/blob/master/docs/api/client-request.md#event-login)\n   */\n  login(handler: LoginHandler) {\n    addHandler(this.emitter, \"login\", handler)\n  }\n\n  progress(handler: (info: ProgressInfo) => void) {\n    addHandler(this.emitter, DOWNLOAD_PROGRESS, handler)\n  }\n\n  updateDownloaded(handler: (info: VersionInfo) => void) {\n    addHandler(this.emitter, UPDATE_DOWNLOADED, handler)\n  }\n\n  updateCancelled(handler: (info: VersionInfo) => void) {\n    addHandler(this.emitter, \"update-cancelled\", handler)\n  }\n}\n\nconst isLogEvent = false\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: (...args: Array<any>) => void) {\n  if (isLogEvent) {\n    emitter.on(event, (...args: Array<any>) => {\n      console.log(\"%s %s\", event, args)\n      handler.apply(null, args)\n    })\n  }\n  else {\n    emitter.on(event, handler)\n  }\n}\n\n// url.format doesn't correctly use path and requires explicit pathname\nexport function formatUrl(url: Url) {\n  if (url.path != null && url.pathname == null) {\n    url.pathname = url.path\n  }\n  return buggyFormat(url)\n}\n\nexport interface Logger {\n  info(message?: any): void\n\n  warn(message?: any): void\n\n  error(message?: any): void\n}"]}
