{"version":3,"file":"PrivateGitHubProvider.js","sourceRoot":"","sources":["../src/PrivateGitHubProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAO,AAAE,AAAM,AAAU;;;;;;AAClC,AAAO,AAAE,AAAiB,AAAE,AAAS,AAAgB,AAAM,AAAuB;;;;;;AAIlF,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAS;;;;AAClC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAK,AAAI,AAAQ,AAAE,AAAM,AAAK;;;;;;AACvC,AAAO,AAAE,AAAgB,AAAE,AAAM,AAAwB;;;;;;AACzD,AAAO,AAAE,AAAkB,AAAE,AAAM,AAAkB;;;;;;AACrD,AAAO,AAAY,AAAS,AAAE,AAAkB,AAAE,AAAqB,AAAE,AAAQ,AAAE,AAAM,AAAQ,AAMjG,AAAM;;;;;;MAA6B,AAAQ,AAA2C;AAGpF,gBAAY,AAAsB,SAAmB,AAAa,OAAmB,AAA2B;AAC9G,AAAK,cAAC,AAAO,SAAE,AAAgB,AAAC;AADmB,aAAK,QAAL,AAAK,AAAQ;AAAmB,aAAQ,WAAR,AAAQ,AAAmB;AAF/F,aAAU,aAAI,AAAe,wCAAC,AAAa,AAAC,AAAgB,AAAC;AAK5E,AAAI,aAAC,AAA6B,AAAE,AACtC;AAAC;AAEK,AAAgB,oBAAtB,AAAK;;;;AACH,kBAAM,AAAQ,WAAG,AAAI,MAAC,AAAQ;AAC9B,kBAAM,AAAiB,oBAAG,AAAI,AAAiB,AAAE;AACjD,kBAAM,AAAW,cAAG,AAAkB,gDAAC,AAAqB,AAAE,AAAC;AAE/D,kBAAM,AAAM,SAAG,MAAM,AAAI,MAAC,AAAoB,qBAAC,AAAQ,UAAE,AAAiB,AAAC;AAC3E,kBAAM,AAAc,iCAClB,AAAO,SAAE,AAAI,MAAC,AAAgB,iBAAC,AAA0B,AAAC,6BAC1D,AAAO,SAAE,AAAI,MAAC,AAAU,sDAAqB,AAAI;AAAC,AAAE,uBAAI,AAAE,GAAC,AAAI,SAAK,AAAW,AAAE;aAA3C,AAAM,EAAsC,AAAG,AAAC,AAAC,GAA1D,AAAQ;AACvC,gBAAI,AAAW;AACf,gBAAI,AAAC;AACH,AAAM,yBAAG,AAAQ,2CAAC,MAAM,AAAI,MAAC,AAAQ,SAAC,AAAO,QAAS,AAAc,gBAAE,AAAiB,AAAC,AAAC,AAC3F;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,AAAC,AAAY,AAAS,gFAAI,AAAC,EAAC,AAAQ,SAAC,AAAU,eAAK,AAAG,AAAC,KAAC,AAAC;AAC5D,0BAAM,IAAI,AAAK,AAAC,qBAAe,AAAW,gDAAqC,AAAS,uCAAC,AAAqB,AAAC,qBAAM,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,AAAC,AAC9I;AAAC;AACD,sBAAM,AAAC,AACT;AAAC;AAED,AAAQ,6CAAC,AAAkB,mBAAC,AAAM,AAAC,AAAC;AACnC,AAAkC,mBAAC,AAAM,SAAG,AAAM;AACnD,AAAM,mBAAC,AAAM,AACf;;AAAC;AAEO,AAA6B;AACnC,cAAM,AAAM;AACV,AAAI,kBAAE,CAAC,AAAuB,AAAC,AAChC;AAFc;AAIf,AAAI,aAAC,AAAU,WAAC,AAAU,WAAC,AAAmB,oBAAC,AAAM,QAAE,CAAC,AAAY,SAAE,AAAa;AACjF,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAc,eAAC,AAAa,iBAAI,AAAI,AAAC,MAAC,AAAC;AACjD,uBAAO,AAAO,QAAC,AAAc,eAAC,AAAa,AAC7C;AAAC;AAED,AAAQ,qBAAC,EAAC,AAAM,QAAE,AAAK,OAAE,AAAc,gBAAE,AAAO,QAAC,AAAc,AAAC,AAAC,AACnE;AAAC,AAAC,AACJ;AAAC;AAEO,AAAgB,qBAAC,AAAc;AACrC,AAAM,+BACJ,AAAM,QAAE,AAAM,QACd,AAAa,AAAE,wBAAS,AAAI,KAAC,AAAK,KAAE,MAAK,AAAI,KAAC,AAAc,AAAC,AACjE;AAAC;AAEa,AAAoB,wBAA1B,AAAK,CAAsB,AAAgB,UAAE,AAAoC;;;;AACvF,kBAAM,AAAc,iCAClB,AAAI,AAAE,SAAG,AAAQ,QAAS,WAC1B,AAAO,SAAE,AAAI,OAAC,AAAgB,iBAAC,AAAgC,AAAC,qCAAK,AAAI,OAAC,AAAO,AAAC;AACpF,gBAAI,AAAC;AACH,AAAM,uBAAC,CAAC,MAAM,AAAI,OAAC,AAAQ,SAAC,AAAO,QAAM,AAAc,gBAAE,AAAiB,AAAC,AAAC,oBAAC,AAAM,AACrF;AAAC,cACD,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,sBAAM,IAAI,AAAK,AAAC,kDAA4C,AAAS,uCAAC,AAAqB,AAAC,gEAAiD,AAAC,EAAC,AAAK,SAAI,AAAC,EAAC,AAAO,OAAE,AAAC,AACtK;AAAC,AACH;;AAAC;AAED,QAAY,AAAQ;AAClB,AAAM,AAAC,yBAAU,AAAI,KAAC,AAAO,QAAC,AAAK,SAAI,AAAI,KAAC,AAAO,QAAC,AAAI,IAAW,AACrE;AAAC;AAEK,AAAa,iBAAnB,AAAK,CAAe,AAAoC;;;;AACtD,kBAAM,AAAO;AACX,AAAM,wBAAE,AAA0B;AAClC,AAAa,AAAE,wCAAS,AAAI,OAAC,AAAK,KAAE,AACrC;AAHe;AAKhB,kBAAM,AAAI,OAAG,AAAW,YAAC,AAAkB,sBAAI,AAAI,MAAC,AAAK,MAAC,AAAQ,SAAC,AAAW,YAAC,AAAI,AAAC,MAAC,AAAO,QAAC,AAAI,MAAE,AAAG,AAAC;AACvG,AAAM;AACJ,AAAI;AACJ,AAAG,iCAAc,AAAM,OAAC,AAAI;AAAC,AAAE,2BAAI,AAAE,GAAC,AAAI,SAAK,AAAI,AAAE;iBAAhD,AAAW,EAAsC,AAAG;AACzD,AAAI,sBAAE,AAAW,YAAC,AAAI;AACtB,AAAM,wBAAE,AAAW,YAAC,AAAM;AAC1B,AAAO;AACP,AAAO,yBAAE,AAAI,OAAC,AAAU,AAClB,AACV;AARS;;AAQR,AACF","sourcesContent":["import { session } from \"electron\"\nimport { CancellationToken, HttpError, HttpExecutor } from \"electron-builder-http\"\nimport { GithubOptions } from \"electron-builder-http/out/publishOptions\"\nimport { UpdateInfo } from \"electron-builder-http/out/updateInfo\"\nimport { RequestOptions } from \"http\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { parse as parseUrl } from \"url\"\nimport { NET_SESSION_NAME } from \"./electronHttpExecutor\"\nimport { BaseGitHubProvider } from \"./GitHubProvider\"\nimport { FileInfo, formatUrl, getChannelFilename, getDefaultChannelName, Provider } from \"./main\"\n\nexport interface PrivateGitHubUpdateInfo extends UpdateInfo {\n  assets: Array<Asset>\n}\n\nexport class PrivateGitHubProvider extends BaseGitHubProvider<PrivateGitHubUpdateInfo> {\n  private readonly netSession = (session as any).fromPartition(NET_SESSION_NAME)\n\n  constructor(options: GithubOptions, private readonly token: string, private readonly executor: HttpExecutor<any>) {\n    super(options, \"api.github.com\")\n\n    this.registerHeaderRemovalListener()\n  }\n\n  async getLatestVersion(): Promise<PrivateGitHubUpdateInfo> {\n    const basePath = this.basePath\n    const cancellationToken = new CancellationToken()\n    const channelFile = getChannelFilename(getDefaultChannelName())\n\n    const assets = await this.getLatestVersionInfo(basePath, cancellationToken)\n    const requestOptions = {\n      headers: this.configureHeaders(\"application/octet-stream\"),\n      session: this.netSession, ...parseUrl(assets.find(it => it.name === channelFile)!.url)}\n    let result: any\n    try {\n      result = safeLoad(await this.executor.request<string>(requestOptions, cancellationToken))\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`Cannot find ${channelFile} in the latest release artifacts (${formatUrl(requestOptions as any)}): ${e.stack || e.message}`)\n      }\n      throw e\n    }\n\n    Provider.validateUpdateInfo(result);\n    (result as PrivateGitHubUpdateInfo).assets = assets\n    return result\n  }\n\n  private registerHeaderRemovalListener(): void {\n    const filter = {\n      urls: [\"*://*.amazonaws.com/*\"]\n    }\n\n    this.netSession.webRequest.onBeforeSendHeaders(filter, (details: any, callback: any) => {\n      if (details.requestHeaders.Authorization != null) {\n        delete details.requestHeaders.Authorization\n      }\n\n      callback({cancel: false, requestHeaders: details.requestHeaders})\n    })\n  }\n\n  private configureHeaders(accept: string) {\n    return {\n      Accept: accept,\n      Authorization: `token ${this.token}`, ...this.requestHeaders}\n  }\n\n  private async getLatestVersionInfo(basePath: string, cancellationToken: CancellationToken): Promise<Array<Asset>> {\n    const requestOptions: RequestOptions = {\n      path: `${basePath}/latest`,\n      headers: this.configureHeaders(\"application/vnd.github.v3+json\"), ...this.baseUrl}\n    try {\n      return (await this.executor.request<any>(requestOptions, cancellationToken)).assets\n    }\n    catch (e) {\n      throw new Error(`Unable to find latest version on GitHub (${formatUrl(requestOptions as any)}), please ensure a production release exists: ${e.stack || e.message}`)\n    }\n  }\n\n  private get basePath() {\n    return `/repos/${this.options.owner}/${this.options.repo}/releases`\n  }\n\n  async getUpdateFile(versionInfo: PrivateGitHubUpdateInfo): Promise<FileInfo> {\n    const headers = {\n      Accept: \"application/octet-stream\",\n      Authorization: `token ${this.token}`\n    }\n\n    const name = versionInfo.githubArtifactName || path.posix.basename(versionInfo.path).replace(/ /g, \"-\")\n    return {\n      name,\n      url: versionInfo.assets.find(it => it.name === name)!.url,\n      sha2: versionInfo.sha2,\n      sha512: versionInfo.sha512,\n      headers,\n      session: this.netSession\n    } as any\n  }\n}\n\nexport interface Asset {\n  name: string\n  url: string\n}"]}
